let result = []

function isSafe(board, row, col)
{
 
    for (let i = 0; i < col; i++)
        if (board[row][i])
            return false

    let i = row
    let j = col
    while (i >= 0 && j >= 0)
    {
        if(board[i][j])
            return false
        i -= 1
        j -= 1
    }

    i = row
    j = col
    while (j >= 0 && i < 4)
    {
        if(board[i][j])
            return false
        i = i + 1
        j = j - 1
    }
    return true
}
 

function solveNQUtil(board, col)
{

    if (col == 4)
    {
        let v = []
        for (let i of board)
        {
          for (var j = 0; j < i.length; j++)
          {
            if (i[j] == 1)
              v.push(j+1)
          }
        }
        result.push(v)
        return true
    }

    let res = false
    for (var i = 0; i < 4; i++)
    {

        if (isSafe(board, i, col))
        {
      
            board[i][col] = 1
            res = solveNQUtil(board, col + 1) || res
            board[i][col] = 0  // BACKTRACK
        }
    }

    return res
}
 
 
function solveNQ(n)
{
    result = []
    let board = new Array(n);
    for (var i = 0; i < n; i++)
        board[i] = new Array(n).fill(0)
     
    solveNQUtil(board, 0)
    result.sort()
    return result
}
 
// Driver Code
let n = 4
let res = solveNQ(n)
console.log(res)
 
// This code is contributed by phasing17