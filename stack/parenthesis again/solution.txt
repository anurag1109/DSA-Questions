
function runProgram(input){
    input=input.trim().split("\n")
    let tc=+input[0]
    let line=1
    for(let j=0;j<tc;j++){
    A=input[line]
    line++
    
    parenthesis(A)
    }
    
    function parenthesis(A){
    
    
let mystack = {
  arr: [],
  top: -1,
 
  isEmpty: function() {
    return (this.top == -1)
  },

  size: function() {
    return (this.top + 1)
  },

  peek: function() {
    if (this.top == -1)
      return "stack is empty";

    return this.arr[this.top]
  },

  push: function(elem) {
    this.top++
    this.arr[this.top] = elem
  },

  pop: function() {
    if (this.top == -1)
      return "stack is empty";

    const temp = this.arr[this.top]
    this.top--
    return temp
  },
  
}

  for(let i=0;i<A.length;i++){
    if(A[i]=='(')
       mystack.push(')');
    else if(A[i]=='{')
       mystack.push('}');
    else if(A[i]=='[')
       mystack.push(']');
    else if(mystack.pop()!=A[i]){
       console.log ("not balanced");
       return
    }
  }

   if(mystack.isEmpty())
     console.log ("balanced");
   else
     console.log ("not balanced");
 }
}

if (process.env.USER === "") {
    runProgram(``);
} else {
        process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
        read += input;
  });
  process.stdin.on("end", function () {
        read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
        read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}