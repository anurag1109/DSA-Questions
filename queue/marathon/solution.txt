 //Enter code here
 function runProgram(input){
    input =input.trim().split("\n")
    let size=+input[0]
    let mat=[]
    for(let i=0;i<size;i++){
    mat.push(input[i+1].trim().split(" ").map(Number))
    }
    // console.log(mat)
   let rem=0
   let start=-1
   
    for(let i=0;i<size;i++){
        // if(mat[i][0]-mat[i][1]+rem<0){
        //     start=-1
        //     rem=0
        // }
        
        // else{
        //     rem=rem+mat[i][0]-mat[i][1]
        //     if(start==-1)
        //     start=i
        // }
        
         rem=rem+mat[i][0]-mat[i][1]
         if(rem<0){
         start=-1
         rem=0
         }
         else if(start==-1)
            start=i
    }
    
    if(start!=0){
        for(let i=0;i<start;i++){
            rem=rem+mat[i][0]-mat[i][1]
            if(rem<0){
        console.log('No starting points')
        return
        }
      }
    }
    
if(rem>0)
console.log(start)
else
console.log('No starting points')

}


if (process.env.USER === "") {
    runProgram(``);
} else {
        process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
        read += input;
  });
  process.stdin.on("end", function () {
        read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
        read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}


class Queue {
  constructor() {
    this.items = {};
    this.headIndex = 0;
    this.tailIndex = 0;
  }
  enqueue(item) {
    this.items[this.tailIndex] = item;
    this.tailIndex++;
  }
  dequeue() {
    const item = this.items[this.headIndex];
    delete this.items[this.headIndex];
    this.headIndex++;
    return item;
  }
  peek() {
    return this.items[this.headIndex];
  }
  get length() {
    return this.tailIndex - this.headIndex;
  }
}
const queue = new Queue();

    