function runProgram(input){
	input=input.trim().split("\n")
	    let [n,tar]=input[0].trim().split(" ").map(Number)
	    let arr=input[1].trim().split(" ").map(Number)
        let dp=[]
        for(let i=0;i<=n;i++){
            let a=[]
            for(let j=0;j<=tar;j++){
                a[j]=-1
            }
            dp.push(a)
        }

	   // console.log(coin(n,arr,tar,1))
	   console.log(minJumpCost(n, tar, arr))
}


function coin(n,arr,ele,k,i,p){
// console.log(sum,i,tar)
  if(i==n)
  return 0
  
  if(k<p)
  return 0
 return Math.abs(arr[i]-ele) +Math.min(coin(n,arr,arr[i],k,i+1,0),coin(n,arr,k,i+1,p+1))
  
  

}


function minJumpCost(N, K, heights) {
  let dp = Array(N).fill(Infinity);
  dp[0] = 0;
  for (let i = 0; i < N; i++) {
    for (let j = i+1; j <= Math.min(i+K, N-1); j++) {
      dp[j] = Math.min(dp[j], dp[i] + Math.abs(heights[i] - heights[j]));
    }
  }
  return dp[N-1];
}





// function coinChange(coins, amount) {
//   const dp = new Array(amount + 1).fill(0);
//   dp[0] = 1;
//   for (let i = 0; i < coins.length; i++) {
//     for (let j = coins[i]; j <= amount; j++) {
//       dp[j] += dp[j - coins[i]];
//     }
//   }
//   return dp[amount];
// }




if (process.env.USER === "") {
    runProgram(``);
} else {
        process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
        read += input;
  });
  process.stdin.on("end", function () {
        read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
        read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}